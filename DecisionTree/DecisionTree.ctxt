#BlueJ class context
comment0.target=DecisionTree
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment1.text=\n\ Setup\ the\ GUI\ and\ make\ a\ sample\ tree\n
comment10.params=node\ x\ topY\ botY\ count\ prevX\ prevY
comment10.target=void\ drawingTree(DTNode,\ float,\ float,\ float,\ float,\ float,\ float)
comment10.text=\n\ Recursive\ method\ for\ drawing\ the\ tree,\ only\ works\ with\ yes/no\ nodes\n
comment11.params=node\ x\ topY\ botY\ count\ prevX\ prevY
comment11.target=void\ drawingTree2(DTNode,\ float,\ float,\ float,\ float,\ float,\ float)
comment11.text=\n\ Trying\ a\ recursive\ method\ for\ drawing\ the\ tree\ that\ works\ with\ all\ nodes\n\ Spoiler\:\ it\ doesn't\ really\ work\n
comment12.params=filename
comment12.target=void\ loadTree(java.lang.String)
comment12.text=\ \n\ Loads\ a\ decision\ tree\ from\ a\ file.\n\ Each\ line\ starts\ with\ either\ "Question\:"\ or\ "Answer\:"\ and\ is\ followed\ by\ the\ text\n\ Calls\ a\ recursive\ method\ to\ load\ the\ tree\ and\ return\ the\ root\ node,\n\ \ and\ assigns\ this\ node\ to\ theTree.\n
comment13.params=lines
comment13.target=DTNode\ loadSubTree(java.util.Queue)
comment13.text=\n\ Loads\ a\ tree\ (or\ subtree)\ from\ a\ Scanner\ and\ returns\ the\ root.\n\ The\ first\ line\ has\ the\ text\ for\ the\ root\ node\ of\ the\ tree\ (or\ subtree)\n\ It\ should\ make\ the\ node,\ and\ \n\ \ \ if\ the\ first\ line\ starts\ with\ "Question\:",\ it\ loads\ two\ subtrees\ (yes,\ and\ no)\n\ \ \ \ from\ the\ scanner\ and\ add\ them\ as\ the\ \ children\ of\ the\ node,\n\ Finally,\ it\ should\ return\ the\ \ node.\n
comment2.params=
comment2.target=void\ setupGUI()
comment2.text=\n\ Set\ up\ the\ interface\n
comment3.params=
comment3.target=void\ printTree()
comment3.text=\ \ \n\ Print\ out\ the\ contents\ of\ the\ decision\ tree\ in\ the\ text\ pane.\n\ The\ root\ node\ should\ be\ at\ the\ top,\ followed\ by\ its\ "yes"\ subtree,\n\ and\ then\ its\ "no"\ subtree.\n\ Needs\ a\ recursive\ "helper\ method"\ which\ is\ passed\ a\ node.\n\ \n\ COMPLETION\:\n\ Each\ node\ should\ be\ indented\ by\ how\ deep\ it\ is\ in\ the\ tree.\n\ The\ recursive\ "helper\ method"\ is\ passed\ a\ node\ and\ an\ indentation\ string.\n\ \ (The\ indentation\ string\ will\ be\ a\ string\ of\ space\ characters)\n
comment4.params=node\ yn\ indent
comment4.target=void\ helper(DTNode,\ java.lang.String,\ java.lang.String)
comment4.text=\n\ Recursive\ helper\ method\ for\ printTree()\n
comment5.params=
comment5.target=void\ runTree()
comment5.text=\n\ Run\ the\ tree\ by\ starting\ at\ the\ top\ (of\ theTree),\ and\ working\n\ down\ the\ tree\ until\ it\ gets\ to\ a\ leaf\ node\ (a\ node\ with\ no\ children)\n\ If\ the\ node\ is\ a\ leaf\ it\ prints\ the\ answer\ in\ the\ node\n\ If\ the\ node\ is\ not\ a\ leaf\ node,\ then\ it\ asks\ the\ question\ in\ the\ node,\n\ and\ depending\ on\ the\ answer,\ goes\ to\ the\ "yes"\ child\ or\ the\ "no"\ child.\n
comment6.params=
comment6.target=void\ growTree()
comment6.text=\n\ Grow\ the\ tree\ by\ allowing\ the\ user\ to\ extend\ the\ tree.\n\ Like\ runTree,\ it\ starts\ at\ the\ top\ (of\ theTree),\ and\ works\ its\ way\ down\ the\ tree\n\ \ until\ it\ finally\ gets\ to\ a\ leaf\ node.\ \n\ If\ the\ current\ node\ has\ a\ question,\ then\ it\ asks\ the\ question\ in\ the\ node,\n\ and\ depending\ on\ the\ answer,\ goes\ to\ the\ "yes"\ child\ or\ the\ "no"\ child.\n\ If\ the\ current\ node\ is\ a\ leaf\ it\ prints\ the\ decision,\ and\ asks\ if\ it\ is\ right.\n\ If\ it\ was\ wrong,\ it\n\ \ -\ asks\ the\ user\ what\ the\ decision\ should\ have\ been,\n\ \ -\ asks\ for\ a\ question\ to\ distinguish\ the\ right\ decision\ from\ the\ wrong\ one\n\ \ -\ changes\ the\ text\ in\ the\ node\ to\ be\ the\ question\n\ \ -\ adds\ two\ new\ children\ (leaf\ nodes)\ to\ the\ node\ with\ the\ two\ decisions.\n
comment7.params=
comment7.target=void\ saveTree()
comment7.text=\n\ Saves\ the\ decision\ tree\ into\ a\ file\ that\ can\ then\ be\ loaded\ back\ in\ using\ loadTree()\ method\n
comment8.params=node
comment8.target=void\ savingTree(DTNode)
comment8.text=\n\ \n\ Recursive\ method\ to\ save\ the\ tree\n
comment9.params=
comment9.target=void\ drawTree()
comment9.text=\n\ Draws\ the\ tree\ into\ a\ graph\n
numComments=14
